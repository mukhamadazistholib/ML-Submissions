# -*- coding: utf-8 -*-
"""ML Submission-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j24M2TGH9rAeMKPykl-yPF5bgvQrMm0X

# **NLP FOR MOVIE GENRE CLASSIFICATION**

---

###**PERSONAL IDENTITY**

Nama : Mukhamad Azis Tholib \
Email: mukhamadazistholib278@gmail.com

###**DOWNLOAD DATASET FROM KAGGLE**
"""

# kaggle instalation package

!pip install -q kaggle

# upload kaggle.json

from google.colab import files
files.upload()

# make directory and change permission for kaggle

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

# download dataset with 'copy api command' from kaggle

!kaggle datasets download -d lokkagle/movie-genre-data

# unzip dataset
!mkdir moviegenredata
!unzip movie-genre-data.zip -d moviegenredata
!ls moviegenredata

"""### **LOAD DATASET**

IMPORT LIBRARY
"""

# import pandas
import pandas as pd
import re


# for split data model
from sklearn.model_selection import train_test_split

# for preprocessing and layer
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.layers import LSTM,Dense,Embedding,Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

# for plot visualization
import matplotlib.pyplot as plt

# load dataset

df = pd.read_csv('moviegenredata/kaggle_movie_train.csv')
df.head()

"""### **CHECKING THE NUMBER OF VALUE IN EACH GENRE**"""

# checking the number of values

df['genre'].value_counts()

"""only choose a few genres from the dataset such as action, comedy, sci-fi and horror"""

# deleting genre data that is not included in the selection

df = df[~df['genre'].isin(['drama','thriller','other','adventure','romance'])]
df['genre'].value_counts()

# deleting special characters in the text field

df['Text'] = df['text'].map(lambda x: re.sub(r'\W+', ' ', x))

# droping the old id and text columns
df = df.drop(['id', 'text'], axis=1)
df.head()

# genre labelization

genre = pd.get_dummies(df.genre)
df_genre = pd.concat([df, genre], axis=1)
df_genre = df_genre.drop(columns='genre')
df_genre.head()

# change the data type to str and numpy array

text = df_genre['Text'].astype(str)
label = df_genre[['action', 'comedy','horror','sci-fi']].values

"""### **VALIDATION SET OF 20% OF THE TOTAL DATASET**"""

# splitting dataset 20% test/validation

genre_train, genre_test, label_train, label_test = train_test_split(text, label, test_size = 0.2)

"""### **TOKENIZER**"""

# seq conversion

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(genre_train) 
tokenizer.fit_on_texts(genre_test)
 
sekuens_train = tokenizer.texts_to_sequences(genre_train)
sekuens_test = tokenizer.texts_to_sequences(genre_test)
 
padded_train = pad_sequences(sekuens_train) 
padded_test = pad_sequences(sekuens_test)

"""### **EMBEDDING AND LSTM**"""

model = Sequential([
    Embedding(input_dim=5000, output_dim=16),
    LSTM(64),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(4, activation='softmax')
])

# model compiile using Adam optimizer

Adam(learning_rate=0.00146, name='Adam')
model.compile(optimizer = 'Adam',loss = 'categorical_crossentropy',metrics = ['accuracy'])

# callback for acc and acc_val upper than 90%

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.9 and logs.get('val_accuracy')>0.9):
      print("\nThe train and validation accuracy obtained has reached the value of > 90%!")
      self.model.stop_training = True
callbacks = myCallback()

"""### **DATA TRAIN**"""

num_epochs = 30
history = model.fit(padded_train, label_train, epochs=num_epochs, validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

"""### **PLOTTING ACC AND LOSS**

**ACCURACY**
"""

# plot accuracy 

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Mccuracy Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""**LOSS**"""

# plot loss 

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Dataset source:\
https://www.kaggle.com/lokkagle/movie-genre-data

"""